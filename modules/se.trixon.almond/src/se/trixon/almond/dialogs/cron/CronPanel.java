/* 
 * Copyright 2015 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.almond.dialogs.cron;

import org.openide.NotificationLineSupport;
import se.trixon.almond.Xlog;

/**
 *
 * @author Patrik Karlsson <patrik@trixon.se>
 */
public class CronPanel extends javax.swing.JPanel implements ElementPanel.ExprChaneListener {

    ElementPanel[] mElementPanels = new ElementPanel[5];
    private NotificationLineSupport mNotificationLineSupport;

    /**
     * Creates new form CronPanel
     */
    public CronPanel() {
        initComponents();

        mElementPanels[0] = elementMinutePanel;
        mElementPanels[1] = elementHourPanel;
        mElementPanels[2] = elementDomPanel;
        mElementPanels[3] = elementMonthPanel;
        mElementPanels[4] = elementDowPanel;

        for (ElementPanel elementPanel : mElementPanels) {
            elementPanel.setExprChaneListener(this);
        }
    }

    public String getCronString() {
        String cron = String.format("%s %s %s %s %s",
                mElementPanels[0].getCronString(),
                mElementPanels[1].getCronString(),
                mElementPanels[2].getCronString(),
                mElementPanels[3].getCronString(),
                mElementPanels[4].getCronString());

        return cron;
    }

    public boolean isCronValid() {
        boolean valid = true;

        for (ElementPanel elementPanel : mElementPanels) {
            String cron = elementPanel.getCronString();
            if (cron.isEmpty() || cron.startsWith("/")) {
                valid = false;
            }
        }

        return valid;
    }

    @Override
    public void onExprChanged() {
        if (isCronValid()) {
            mNotificationLineSupport.setInformationMessage(getCronString());
        } else {
            mNotificationLineSupport.setErrorMessage(getCronString());
        }
    }

    public void setCronString(String cronString) {
        String[] cronItems = cronString.split(" ");

        for (int i = 0; i < 5; i++) {
            try {
                mElementPanels[i].setCronString(cronItems[i]);
            } catch (ArrayIndexOutOfBoundsException e) {
                mElementPanels[i].setCronString("*");
            }
        }

        onExprChanged();
    }

    public void setNotificationLineSupport(NotificationLineSupport notificationLineSupport) {
        mNotificationLineSupport = notificationLineSupport;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        elementMinutePanel = new se.trixon.almond.dialogs.cron.ElementMinutePanel();
        elementHourPanel = new se.trixon.almond.dialogs.cron.ElementHourPanel();
        elementDomPanel = new se.trixon.almond.dialogs.cron.ElementDomPanel();
        elementMonthPanel = new se.trixon.almond.dialogs.cron.ElementMonthPanel();
        elementDowPanel = new se.trixon.almond.dialogs.cron.ElementDowPanel();

        setLayout(new java.awt.GridLayout(1, 0));

        elementMinutePanel.setText(org.openide.util.NbBundle.getMessage(CronPanel.class, "CronPanel.elementMinutePanel.text")); // NOI18N
        add(elementMinutePanel);

        elementHourPanel.setText(org.openide.util.NbBundle.getMessage(CronPanel.class, "CronPanel.elementHourPanel.text")); // NOI18N
        add(elementHourPanel);

        elementDomPanel.setText(org.openide.util.NbBundle.getMessage(CronPanel.class, "CronPanel.elementDomPanel.text")); // NOI18N
        add(elementDomPanel);

        elementMonthPanel.setText(org.openide.util.NbBundle.getMessage(CronPanel.class, "CronPanel.elementMonthPanel.text")); // NOI18N
        add(elementMonthPanel);

        elementDowPanel.setText(org.openide.util.NbBundle.getMessage(CronPanel.class, "CronPanel.elementDowPanel.text")); // NOI18N
        add(elementDowPanel);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private se.trixon.almond.dialogs.cron.ElementDomPanel elementDomPanel;
    private se.trixon.almond.dialogs.cron.ElementDowPanel elementDowPanel;
    private se.trixon.almond.dialogs.cron.ElementHourPanel elementHourPanel;
    private se.trixon.almond.dialogs.cron.ElementMinutePanel elementMinutePanel;
    private se.trixon.almond.dialogs.cron.ElementMonthPanel elementMonthPanel;
    // End of variables declaration//GEN-END:variables
}
