/*
 * Copyright 2019 Patrik Karlström.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.almond.util.swing.dialogs.about;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.lang3.StringUtils;
import se.trixon.almond.util.Dict;
import se.trixon.almond.util.SystemHelper;
import se.trixon.almond.util.swing.dialogs.about.AboutPanel.TabComponentListener;

/**
 *
 * @author Patrik Karlström
 */
public class PropertiesTab extends JPanel implements TabComponentListener {

    private DefaultTableModel mModel;
    private int mMaxKeyLength = 0;

    /**
     * Creates new form PropertiesTab
     */
    public PropertiesTab() {
        initComponents();
        init();
        initSystemProperties();
    }

    @Override
    public void reset() {
        SwingUtilities.invokeLater(() -> {
            scrollPane.getVerticalScrollBar().setValue(0);
        });
    }

    private void addSystemProperty(String key) {
        if (System.getProperties().keySet().contains(key)) {
            mModel.addRow(new Object[]{key, System.getProperty(key)});
            mMaxKeyLength = Math.max(mMaxKeyLength, key.length());
        }
    }

    private void init() {
        mModel = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        table.setModel(mModel);

        mModel.addColumn(Dict.KEY.toString());
        mModel.addColumn(Dict.VALUE.toString());

        table.getColumnModel().getColumn(1).setPreferredWidth(280);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

        table.addMouseListener(new PopupListener());
    }

    private void initSystemProperties() {
        String[] keys = new String[]{
            "user.country",
            "user.home",
            "user.language",
            "user.name",
            "user.timezone",
            "",
            "os.arch",
            "os.name",
            "os.version",
            "",
            "file.encoding.pkg",
            "file.encoding",
            "file.separator",
            "path.separator",
            "",
            "netbeans.home",
            "netbeans.user",
            "netbeans.dirs",
            "netbeans.running.environment",
            "netbeans.productversion",
            "netbeans.buildnumber",
            "netbeans.dynamic.classpath",
            "netbeans.logger.console",
            "",
            "java.awt.graphicsenv",
            "java.awt.printerjob",
            "java.class.path",
            "java.class.version",
            "java.endorsed.dirs",
            "java.ext.dirs",
            "java.home",
            "java.io.tmpdir",
            "java.library.path",
            "java.runtime.name",
            "java.runtime.version",
            "java.specification.name",
            "java.specification.vendor",
            "java.specification.version",
            "java.vendor",
            "java.vendor.url.bug",
            "java.vendor.url",
            "java.version",
            "java.vm.info",
            "java.vm.name",
            "java.vm.specification.name",
            "java.vm.specification.vendor",
            "java.vm.specification.version",
            "java.vm.vendor",
            "java.vm.version",
            "",
            "sun.arch.data.model",
            "sun.boot.class.path",
            "sun.boot.library.path",
            "sun.cpu.endian",
            "sun.cpu.isalist",
            "sun.io.unicode.encoding",
            "sun.java.launcher",
            "sun.jnu.encoding",
            "sun.management.compiler",
            "sun.os.patch.level"

        };

        for (String key : keys) {
            if (key.isEmpty()) {
                mModel.addRow(new Object[]{"", ""});
            } else {
                addSystemProperty(key);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        menuItem = new javax.swing.JMenuItem();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        menuItem.setText(Dict.COPY.toString());
        menuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        popupMenu.add(menuItem);

        scrollPane.setPreferredSize(new java.awt.Dimension(450, 200));

        table.getTableHeader().setReorderingAllowed(false);
        scrollPane.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemActionPerformed
        StringBuilder builder = new StringBuilder();

        for (int i = 0; i < mModel.getRowCount(); i++) {
            String key = (String) mModel.getValueAt(i, 0);
            String val = (String) mModel.getValueAt(i, 1);

            builder.append(StringUtils.rightPad(key, mMaxKeyLength + 2)).append(val).append("\n");
        }

        SystemHelper.copyToClipboard(builder.toString());
    }//GEN-LAST:event_menuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem menuItem;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    class PopupListener extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }

        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                popupMenu.show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }
}
